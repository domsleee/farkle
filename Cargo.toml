[package]
name = "farkle"
version = "0.1.0"
authors = ["Dom <domslee97@gmail.com>"]
edition = "2018"
default-run = "mybin"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = { version = "0.2.63", features = ["serde-serialize"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
wee_alloc = { version = "0.4.5", optional = true }
rust-freqdist = "0.1.5"
itertools = "0.10.5"
derivative = "2.2.0"
is_sorted = "0.1.1"
serde = { version = "1.0.152", features = ["derive"] }
wasm-bindgen-futures = "0.4.34"
serde-wasm-bindgen = "0.4"
serde_json = "1.0.93"
serde_repr = "0.1.10"
bincode = "1.3.3"
js-sys = "0.3.61"
log = "0.4.17"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
rand = { version = "0.8.5" }
stopwatch = "0.0.7"
clap = { version = "4.1.4", features = [ "derive" ] }


[dependencies.web-sys]
version = "0.3.61"
features = [
  'Headers',
  'Request',
  'RequestInit',
  'RequestMode',
  'Response',
  'Window',
  'console',
  'Blob'
]

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = 3
debug = 1
target-cpu='native'
lto = true
strip = true
codegen-units = 1

[[bin]]
name = "mybin"
path = "src/bin/main.rs"

[target.wasm32-unknown-unknown]
rustflags = [
  "-C", "link-args=-z stack-size=1500000 max-memory=4000000 --max-memory=4000000",
]
